[1,["1a7317b00@6c48a","11c77f36d@6c48a","6fRC+DJV1PlroQfL/vmLiy@f9941","24xBnqY6hOoanQf8RpSJu8@f9941","20g1ukYUVPvKWKBRznAKo+@f9941","e6x61zTltEX5QdHY2/7B72","90q5L3c/ZAToZrrZDQ1TCY@f9941","b9r1vXIN1NLIvM+bZxFj1C","1cNlVUlXpMqrfl8T9U9BL3@6c48a","cdNxwBRXVODpRUCMQgaXHe@f9941","20g1ukYUVPvKWKBRznAKo+@6c48a","24xBnqY6hOoanQf8RpSJu8@6c48a","3390l/GWpN67S/2A9K95nF@6c48a","eeTjTuJ1hLI7/HMwiKfMiF","dcXQbVHD1JS5nFJ70DsACc@f9941","4cj+JGWEFNmbQjoTVN/9wR@f9941","06F+vYFwJJtY4zfbr9DWjG@f9941","54TknWPwVPqJqeCR+Y/Czo@6c48a","7733/J07NPnbglkNo23GVs","44Rf2DLkhK6YCVk6P+xk9D@f9941","8fzJxviDdGWb2IXSvTt5ml@f9941","fbifv4BmFG6JYiNuBVRDQi@f9941","dabACw+4FNSJfd7tAnD1Qq@f9941","02PlN5IexJrZzMYXccOenA@f9941","71GQStYydDdb9dotxSLw74@f9941","beDlysHPpMXYUEUtQTsa39@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","533qXUTvBJkLbKpbDpSJCs@f9941","3390l/GWpN67S/2A9K95nF@f9941","95EkngnxZFbYuFpsqVTaFr@6c48a","d8ApKSF85BAY2pedOD8C/B@f9941","d8ApKSF85BAY2pedOD8C/B@6c48a","dcXQbVHD1JS5nFJ70DsACc@6c48a","e76h3/WXhDkJiXhCkydb3F@6c48a","1cNlVUlXpMqrfl8T9U9BL3@f9941","e76h3/WXhDkJiXhCkydb3F@f9941","fcNYEsBeFJvb8NknT/RF4h@6c48a"],["node","_textureSource","_spriteFrame","root","data","spriteFrame","target","_effectAsset","_parent","anim","_defaultClip","_file","_target","exitFullscreen","toFullscreen","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],["cc.SpriteFrame",["cc.Node",["_name","_layer","_active","_objFlags","_components","_prefab","_parent","_children","_lpos","_lscale"],-1,9,4,1,2,5,5],"cc.ImageAsset","cc.Texture2D",["cc.Widget",["_alignFlags","_originalWidth","_originalHeight","_left","_top","_isAbsTop","_right","_bottom","_isAbsBottom","_isAbsLeft","node","__prefab","_target"],-7,1,4,1],["cc.Label",["_string","_actualFontSize","_fontSize","_lineHeight","_cacheMode","_overflow","_isBold","_horizontalAlign","_verticalAlign","_enableWrapText","node","__prefab","_color"],-7,1,4,5],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],["cc.Sprite",["_sizeMode","_type","node","__prefab","_spriteFrame","_color"],1,1,4,6,5],["AutoTargetSizeCC",["backupDescribe","autoHeight","_paddingHeight","autoWidth","_paddingWidth","node","__prefab","target","widgets"],-2,1,4,1,2],["ButtonCC",["backupDescribe","_isPlayBreathe","uiUrl","node","__prefab","eventHandler"],0,1,4,4],["cc.Node",["_name","_layer","_children","_components","_prefab","_parent","_lscale","_lpos"],1,2,12,4,1,5,5],["cc.PrefabInfo",["fileId","instance","targetOverrides","nestedPrefabInstanceRoots","root","asset"],-1,1,1],["ControllerByChildItem",["controllerName","visible"],1],["cc.Layout",["_resizeMode","_layoutType","_spacingY","node","__prefab"],0,1,4],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.TextAsset",["_name","text"],1],["cc.Prefab",["_name"],2],["cc.CompPrefabInfo",["fileId"],2],["Tip",["node","__prefab"],3,1,4],["cc.UIOpacity",["node","__prefab"],3,1,4],["AnimtorCC",["backupDescribe","node","__prefab","anim"],2,1,4,1],["cc.Animation",["node","__prefab","_clips"],3,1,4,3],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["Dialogue",["node","__prefab"],3,1,4],["ControllerCC",["backupDescribe","_itemName","node","__prefab","items"],1,1,4,9],["ControllerCCItem2",["controllerName"],2],["SpriteEnableFadeInCC",["backupDescribe","node","__prefab"],2,1,4],["ControllerByChildCC",["backupDescribe","node","__prefab","items"],2,1,4,9],["cc.ParticleSystem2D",["_dstBlendFactor","emissionRate","life","lifeVar","angle","angleVar","startSize","startSizeVar","endSize","startSpin","endSpin","endSpinVar","speed","speedVar","tangentialAccel","_totalParticles","node","__prefab","posVar","gravity","_startColor","_startColorVar","_endColor","_endColorVar","_file","_spriteFrame"],-13,1,4,5,5,5,5,5,5,6,6],["920a5/ssThGH4RQZgpXJcYL",["backupDescribe","lockUIMgrAll","node","__prefab"],1,1,4],["SwitchChildrenCC",["backupDescribe","node","__prefab"],2,1,4],["cc.Material",["_name","_props","_states","_defines"],-1],["cc.Material",["_name","_states","_defines","_props"],0,12],["eab912EeQZH+IqF2yZKCaEz",["backupDescribe","lockUIMgrAll","stageUp","_maskOpacityUI","node","__prefab"],-1,1,4],["EventHandlerCC",["event"],3,4],["c12a3j8heVOyogqA4QywMBi",["backupDescribe","isEventBlock","lockUIMgrAll","node","__prefab"],0,1,4],["cc.Button",["_transition","node","__prefab","clickEvents","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,4,9,5,1,6,6,6,6],["9bd43IPuLZPLb+hCKd8VNlA",["node","__prefab","toFullscreen","exitFullscreen"],3,1,4,1,1],["MoveCC",["backupDescribe","isWorldMove","speed","node","__prefab","target","items"],0,1,4,1,9],["MoveCCItem",["targetV3","onStart","onEnd","onUpdate"],3,5,4,4,4],["MaxBoxCC",["backupDescribe","node","__prefab"],2,1,4],["SpriteLoaderCC",["backupDescribe","isLanguage","spriteFrameByUuid","_bindLoad","_autoSize","_isTrim","node","__prefab"],-3,1,4],["cc.EffectAsset",["_name","shaders","techniques"],0],["LoadingWait",["node","__prefab"],3,1,4],["AnimtorByTweenCC",["backupDescribe","type","node","__prefab"],1,1,4],["cc.AudioClip",["_name","_native","_duration"],0],["cc.LabelAtlas",["_name","fontSize","fntConfig"],0],["cc.ParticleAsset",["_name","_native"],1]],[[17,0,2],[11,0,1,2,3,4,5,5],[6,0,1,2,1],[1,0,1,6,4,5,8,3],[1,0,1,6,4,5,3],[34,0,1],[14,1],[12,0,2],[1,0,1,6,7,4,5,8,3],[16,0,2],[7,1,0,2,3,4,3],[27,0,1,2,3,2],[1,0,1,7,4,5,3],[7,2,3,4,1],[4,0,1,2,10,11,4],[5,0,1,2,3,4,10,11,12,6],[7,0,2,3,5,4,2],[22,0,1,1],[4,0,10,11,2],[12,0,1,3],[46,0,1,2,4],[1,0,1,6,7,4,5,3],[6,0,1,1],[6,0,1,2,3,1],[5,0,1,2,3,6,10,11,12,6],[38,0,1,2,3,4,5,6,4],[39,0,1,2,3,1],[42,0,1,2,4],[1,0,2,1,6,7,4,5,4],[1,0,1,4,5,3],[5,0,1,2,3,5,10,11,12,6],[5,0,1,2,3,6,4,10,11,12,7],[5,0,1,2,5,9,10,11,12,6],[25,0,2],[4,0,1,2,10,11,12,4],[4,0,1,10,11,3],[26,0,1,2,2],[31,0,1,2,3,5],[9,0,1,3,4,5,3],[41,0,1,2,3,4,5,6,7,7],[47,0,1,3],[15,0,1,3],[1,0,1,7,4,5,8,3],[1,0,1,6,7,4,5,9,3],[1,0,1,4,5,8,3],[1,0,2,1,6,7,4,5,8,4],[1,0,3,1,6,4,5,4],[1,0,3,2,1,6,4,5,5],[10,0,1,5,2,3,4,6,3],[10,0,1,2,3,4,7,3],[6,0,1,3,1],[18,0,1,1],[11,0,1,3,2,4,5,5],[19,0,1,1],[20,0,1,2,3,2],[5,0,7,8,1,2,3,5,10,11,12,8],[5,0,1,2,3,4,10,11,6],[5,0,1,3,6,4,10,11,12,6],[8,0,1,2,5,6,7,4],[8,0,3,1,4,2,5,6,7,6],[8,0,3,1,4,2,5,6,7,8,6],[7,1,0,2,3,5,4,3],[21,0,1,2,1],[23,0,1,1],[24,0,1,2,3,4,3],[4,0,3,6,1,10,11,5],[4,1,2,10,11,3],[4,0,7,8,10,11,4],[4,0,3,4,9,5,10,11,6],[4,0,4,5,10,11,4],[28,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,17],[29,0,1,2,3,3],[30,0,1,2,2],[32,0,1,2,3,4],[33,0,1,2,3,4,5,5],[13,0,1,3,4,3],[13,0,1,2,3,4,4],[9,0,3,4,5,2],[9,0,2,3,4,5,3],[14,0,1,2,3],[35,0,1,2,3,4,4],[36,0,1,2,3,4,5,6,7,8,9,2],[37,0,1,2,3,1],[40,0,1,2,2],[43,0,1,1],[44,0,1,2,3,3],[45,0,1,2,4]],[[[{"name":"logo","rect":{"x":1543,"y":978,"width":624,"height":130},"offset":{"x":2,"y":1.5},"originalSize":{"width":704,"height":137},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"bottom","rect":{"x":598,"y":3,"width":750,"height":650},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":650},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"starttext","rect":{"x":1254,"y":467,"width":137,"height":48},"offset":{"x":-0.5,"y":1},"originalSize":{"width":194,"height":50},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"bg_border3","rect":{"x":1415,"y":1646,"width":30,"height":30},"offset":{"x":0,"y":0},"originalSize":{"width":30,"height":30},"rotated":false,"capInsets":[10,12,11,13],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"3","rect":{"x":1451,"y":1646,"width":100,"height":29},"offset":{"x":0,"y":0},"originalSize":{"width":100,"height":29},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"fmt":"0","w":987,"h":1792},-1],[2],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["11c77f36d"]}],[3],0,[],[],[]],[[{"name":"closeTip","rect":{"x":801,"y":1495,"width":207,"height":18},"offset":{"x":0,"y":0},"originalSize":{"width":207,"height":18},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[41,"configs","{\"platform\":[[\"banner\",\"interstitial\",\"nativeTemp\",\"rewardedVideo\",\"nativeTempRoot\",\"appid\",\"rewardedVideoOnce\",\"bannerUpdate\",\"blockOnce\",\"blockOnceUpdate\"],{\"1\":[\"adunit-9603004b6a9125e1\",[\"adunit-560cb26f60cc7a2a\",\"adunit-742ca62c788250f2\"],\"adunit-1312ee8368a9be8b\",\"adunit-c2155c6d6ea8c7f4\",\"\",\"\",\"\",\"\",\"adunit-563d0421244c8bc6\",\"\"],\"2\":[\"04ec2b25ad854e117a35d6b7d076a16f\",\"055608e77df1e15bed45427720e575f7\",\"6f4fe42a295a14e8c2d96c7ebcef5498\",\"0c7449220b94870dce2d314458f0b4e5\",\"\",1112299788,\"\",\"\",\"59345af6cd767fef46abb1e0bf499552\",\"\"],\"3\":[\"\",\"\",\"\",\"1qh38pq820s8dm69a0\",\"\",\"tt3bff4d42a4c3935f02\",\"\",\"\",\"\",\"\"],\"4\":[\"203cbc6d95684751ba9440634a370d49\",\"d5ebb6653c654391bb9be33ad5d87115\",\"71b9ee0e3f4845f0a528b90f40ecc1d5\",\"48a89d33137d45d58a0f119a3ba84289\",\"fd9bcbb61d29450bab76799d8c9e7b64\",\"\",\"\",\"\",\"\",\"\"],\"5\":[1208502,\"\",1208541,1208554,1208530,\"\",\"\",\"\",\"\",\"\"],\"6\":[947533312,947533391,\"\",947482418,\"\",\"\",\"\",\"\",\"\",\"\"],\"7\":[\"w4h3yphikx\",\"l0wedzggm1\",\"\",\"f8dvwrgo1q  \",\"\",108558933,\"\",\"\",\"\",\"\"],\"8\":[\"5ae7a621d432d13ca7be8201c23b41d7\",\"c2fb8026dac386c67043ae9938c483b3\",\"\",\"ee99a7b9b47adc3a7fed2fa724232f72\",\"\",\"\",\"\",\"\",\"\",\"\"],\"9\":[\"8a3c19ae248be93c\",\"5ae4498d290e54a0\",\"\",\"280999b568034411\",\"\",\"\",\"\",\"\",\"\",\"\"],\"10\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"11\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"12\":[\"\",\"ad_bd1dc8e046bdc1cf\",\"\",\"ad_36917dc0c8c8944c\",\"\",\"kwaiv11nv0xif243\",\"\",\"\",\"\",\"\"],\"13\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"14\":[\"\",\"2300005008_02\",\"\",\"2300005008_01\",\"\",\"ks701435645020147650\",\"\",\"\",\"\",\"\"],\"99\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"8888\":[\"\",\"\",\"\",951474837,\"\",\"\",\"\",\"\",\"\",\"\"],\"8899\":[\"\",\"\",\"\",947482418,\"\",\"\",\"\",\"\",\"\",\"\"],\"9999\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]}],\"main\":[[\"value\"],{\"1\":[\"\"],\"2\":[\"\"],\"3\":[\"\"],\"4\":[\"\"],\"5\":[\"\"],\"6\":[\"\"],\"7\":[\"\"],\"8\":[14],\"9\":[100],\"10\":[\"\"],\"11\":[1]}],\"language\":[[\"chinese\",\"traditional\",\"english\"],{\"1001\":[\"未知\",\"\",\"\"],\"1002\":[\"北京\",\"\",\"\"],\"1003\":[\"天津\",\"\",\"\"],\"1004\":[\"上海\",\"\",\"\"],\"1005\":[\"重庆\",\"\",\"\"],\"1006\":[\"河北\",\"\",\"\"],\"1007\":[\"山西\",\"\",\"\"],\"1008\":[\"内蒙古\",\"\",\"\"],\"1009\":[\"辽宁\",\"\",\"\"],\"1010\":[\"吉林\",\"\",\"\"],\"1011\":[\"黑龙江\",\"\",\"\"],\"1012\":[\"江苏\",\"\",\"\"],\"1013\":[\"浙江\",\"\",\"\"],\"1014\":[\"安徽\",\"\",\"\"],\"1015\":[\"福建\",\"\",\"\"],\"1016\":[\"江西\",\"\",\"\"],\"1017\":[\"山东\",\"\",\"\"],\"1018\":[\"河南\",\"\",\"\"],\"1019\":[\"湖北\",\"\",\"\"],\"1020\":[\"湖南\",\"\",\"\"],\"1021\":[\"广东\",\"\",\"\"],\"1022\":[\"广西\",\"\",\"\"],\"1023\":[\"海南\",\"\",\"\"],\"1024\":[\"四川\",\"\",\"\"],\"1025\":[\"贵州\",\"\",\"\"],\"1026\":[\"云南\",\"\",\"\"],\"1027\":[\"西藏\",\"\",\"\"],\"1028\":[\"陕西\",\"\",\"\"],\"1029\":[\"甘肃\",\"\",\"\"],\"1030\":[\"青海\",\"\",\"\"],\"1031\":[\"宁夏\",\"\",\"\"],\"1032\":[\"新疆\",\"\",\"\"],\"1033\":[\"香港\",\"\",\"\"],\"1034\":[\"澳门\",\"\",\"\"],\"1035\":[\"台湾\",\"\",\"\"]}],\"prop\":[[\"default_count\",\"max_count\",\"id_name\",\"id_describe\",\"auto_resume\",\"icon_url\",\"add_other_icon_url\",\"is_fly\",\"is_package_show\",\"is_refull\",\"add_ui\",\"today_max\",\"video_add_count\",\"is_video_add_use\"],{\"1\":[0,-1,401,22,[-1,-1,0],\"\",\"\",\"\",\"\",\"\",\"\",\"\",99999999,1],\"2\":[0,-1,3,3,[-1,-1,0],\"\",\"\",\"\",\"\",\"\",\"\",\"\",99999999,1],\"3\":[0,-1,402,23,[-1,-1,0],\"\",\"\",\"\",\"\",\"\",\"\",\"\",99999999,1],\"4\":[0,-1,403,5,[-1,-1,0],\"\",\"\",\"\",\"\",\"\",\"\",\"\",99999999,1],\"5\":[0,-1,404,405,[-1,-1,0],\"\",\"\",\"\",\"\",\"\",\"\",\"\",99999999,1],\"6\":[0,-1,401,22,[-1,-1,0],\"\",\"\",\"\",\"\",\"\",\"\",\"\",99999999,1],\"7\":[0,-1,3,3,[-1,-1,0],\"\",\"\",\"\",\"\",\"\",\"\",\"\",99999999,1]}],\"province_item\":[[\"id_name\",\"id_describe\",\"countryId\",\"fakemin\",\"fakemax\"],{\"1\":[1001,\"\",\"\",\"\",\"\"],\"2\":[1002,\"\",\"\",5,20],\"3\":[1003,\"\",\"\",0,0],\"4\":[1004,\"\",\"\",10,30],\"5\":[1005,\"\",\"\",0,0],\"6\":[1006,\"\",\"\",20,60],\"7\":[1007,\"\",\"\",0,15],\"8\":[1008,\"\",\"\",0,0],\"9\":[1009,\"\",\"\",0,15],\"10\":[1010,\"\",\"\",0,15],\"11\":[1011,\"\",\"\",0,0],\"12\":[1012,\"\",\"\",80,150],\"13\":[1013,\"\",\"\",80,150],\"14\":[1014,\"\",\"\",10,30],\"15\":[1015,\"\",\"\",10,30],\"16\":[1016,\"\",\"\",0,15],\"17\":[1017,\"\",\"\",50,120],\"18\":[1018,\"\",\"\",20,60],\"19\":[1019,\"\",\"\",10,30],\"20\":[1020,\"\",\"\",0,0],\"21\":[1021,\"\",\"\",100,300],\"22\":[1022,\"\",\"\",0,15],\"23\":[1023,\"\",\"\",0,0],\"24\":[1024,\"\",\"\",50,120],\"25\":[1025,\"\",\"\",0,0],\"26\":[1026,\"\",\"\",0,0],\"27\":[1027,\"\",\"\",0,0],\"28\":[1028,\"\",\"\",0,0],\"29\":[1029,\"\",\"\",0,0],\"30\":[1030,\"\",\"\",0,0],\"31\":[1031,\"\",\"\",0,0],\"32\":[1032,\"\",\"\",0,0],\"33\":[1033,\"\",\"\",0,0],\"34\":[1034,\"\",\"\",0,0],\"35\":[1035,\"\",\"\",0,0]}],\"level_item\":[[\"id_name\",\"id_describe\",\"icon_url\",\"size\",\"anim\",\"tip\",\"seed_id\",\"video_count\",\"crad_id\",\"crad_count\",\"card_random\"],{\"1\":[\"\",\"\",\"\",[5,4],0,1,\"\",2,[1,2,3,4,5],[3,3,3,4,4],1],\"2\":[\"\",\"\",\"\",[6,5],0,1,\"\",3,[1,2,3,4,5],[4,4,6,6,6],1],\"3\":[\"\",\"\",\"\",[7,6],0,1,\"\",3,[1,2,3,4,5],[7,7,8,8,8],1],\"4\":[\"\",\"\",\"\",[7,6],0,1,\"\",3,[1,2,3,4,5,6],[6,6,6,6,7,7],1],\"5\":[\"\",\"\",\"\",[8,6],0,1,\"\",3,[1,2,3,4,5,6],[7,7,7,7,8,8],1],\"6\":[\"\",\"\",\"\",[8,6],0,1,\"\",3,[1,2,3,4,5,6],[7,7,7,7,8,8],1],\"7\":[\"\",\"\",\"\",[8,6],0,1,\"\",3,[1,2,3,4,5,6],[7,7,7,7,8,8],1],\"8\":[\"\",\"\",\"\",[8,6],0,1,\"\",3,[1,2,3,4,5,6],[7,7,7,7,8,8],1],\"9\":[\"\",\"\",\"\",[8,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,4,8,9,9,9,9],1],\"10\":[\"\",\"\",\"\",[8,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,4,8,9,9,9,9],1],\"11\":[\"\",\"\",\"\",[8,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,4,8,9,9,9,9],1],\"12\":[\"\",\"\",\"\",[9,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,5,10,10,10,10,10],1],\"13\":[\"\",\"\",\"\",[9,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,5,10,10,10,10,10],1],\"14\":[\"\",\"\",\"\",[9,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,5,10,10,10,10,10],1],\"15\":[\"\",\"\",\"\",[9,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,5,10,10,10,10,10],1],\"16\":[\"\",\"\",\"\",[10,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,8,10,11,11,11,11],1],\"17\":[\"\",\"\",\"\",[10,7],0,1,\"\",3,[1,2,3,4,5,6,7],[4,8,10,11,11,11,11],1],\"18\":[\"\",\"\",\"\",[10,8],0,1,\"\",3,[1,2,3,4,5,6,7,8],[4,8,10,10,11,11,11,11],1],\"19\":[\"\",\"\",\"\",[10,8],0,1,\"\",3,[1,2,3,4,5,6,7,8],[4,8,10,10,11,11,11,11],1],\"20\":[\"\",\"\",\"\",[10,8],0,1,\"\",3,[1,2,3,4,5,6,7,8],[4,8,10,10,11,11,11,11],1]}],\"today_item\":[[\"id_name\",\"id_describe\",\"icon_url\",\"size\",\"anim\",\"time\",\"tip\",\"removeRatio\",\"seed_id\",\"bug_count\",\"scaleMin\"],{\"1\":[\"\",\"\",\"\",[4,4],0,1,1,0.2,3,0,1],\"2\":[\"\",\"\",\"\",[14,14],1,1,0,0.2,-1,1,0.6]}],\"constom_item\":[[\"id_name\",\"id_describe\",\"icon_url\",\"size\",\"anim\",\"tip\",\"seed_id\",\"scaleMin\",\"open_count\",\"cards\"],{\"1\":[\"\",\"\",\"\",[4,3],0,0,1,0.6,5,[5,6,7,9,10]]}],\"card_item\":[[\"id_name\",\"id_describe\",\"icon_url\",\"font_color\",\"level_icon_color\"],{\"1\":[\"\",\"\",\"scene/texture/resImg/1\",\"#761d1d\",\"#d85f5f\"],\"2\":[\"\",\"\",\"scene/texture/resImg/2\",\"#795f1b\",\"#dda100\"],\"3\":[\"\",\"\",\"scene/texture/resImg/3\",\"#115263\",\"#29accd\"],\"4\":[\"\",\"\",\"scene/texture/resImg/4\",\"#4a2e1a\",\"#895f41\"],\"5\":[\"\",\"\",\"scene/texture/resImg/5\",\"#234b23\",\"#5e995f\"],\"6\":[\"\",\"\",\"scene/texture/resImg/6\",\"#572e73\",\"#a760d7\"],\"7\":[\"\",\"\",\"scene/texture/resImg/7\",\"#87472b\",\"#e87c4e\"],\"8\":[\"\",\"\",\"scene/texture/resImg/8\",\"#702d64\",\"#d760c1\"],\"9\":[\"\",\"\",\"scene/texture/resImg/9\",\"#677a2e\",\"#c7e960\"],\"10\":[\"\",\"\",\"scene/texture/resImg/10\",\"#451c1a\",\"#894441\"],\"11\":[\"\",\"\",\"scene/texture/resImg/11\",\"#1d2548\",\"#414e89\"],\"12\":[\"\",\"\",\"scene/texture/resImg/12\",\"#22654e\",\"#60d7af\"],\"13\":[\"\",\"\",\"scene/texture/resImg/gray\",\"#4d4d59\",\"#9595aa\"]}]}"]],0,0,[],[],[]],[[{"fmt":"0","w":1685,"h":1686},-1],[2],0,[],[],[]],[[{"base":"2,2,0,0,0,0","mipmaps":["1a7317b00"]}],[3],0,[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["1cNlVUlXpMqrfl8T9U9BL3"]}],[3],0,[],[],[]],[[{"name":"shuzi","rect":{"x":0,"y":0,"width":460,"height":45},"offset":{"x":0,"y":0},"originalSize":{"width":460,"height":45},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-230,-22.5,0,230,-22.5,0,-230,22.5,0,230,22.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,45,460,45,0,0,460,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-230,"y":-22.5,"z":0},"maxPos":{"x":230,"y":22.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[8]],[[{"name":"butter2222","rect":{"x":1557,"y":472,"width":125,"height":109},"offset":{"x":0,"y":0},"originalSize":{"width":125,"height":109},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"Tip"],[42,"Tip",33554432,[-4],[[2,-2,[0,"c3+FsAbWpEVqW9zdO2gxx2"],[5,0,0]],[51,-3,[0,"69ucjGpItFoKoXPfVcfTy7"]]],[1,"04ouyg4ulAsLUlu0tiWkjv",null,null,null,-1,0],[1,0,561.846,0]],[48,"content",33554432,1,[-10,-11],[[[2,-5,[0,"f9CRdjjkZFyKnmubRJPNhr"],[5,720.16,199.3]],-6,[53,-7,[0,"6eY7G+YxtI3IJT7oI9hdgb"]],[54,"动画组件",-9,[0,"22CAwyjoNOaKSSdzMM0XHP"],-8]],4,1,4,4],[1,"4cAkRV+7RFVpfO9jSq07Ka",null,null,null,1,0],[1,0.7,0.7,1]],[3,"Label",33554432,2,[[2,-12,[0,"c68UOAlNhN171Umca6yVvF"],[5,590.16,69.3]],[30,"提示ewqeqweqwewq2344334",44,44,55,3,-13,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4279834905]],[58,"自动撑开目标节点Size",true,130,-14,[0,"0adCfnimVNCp70sTW1yMzq"],2],[59,"自动撑开目标节点Size",true,true,220,50,-16,[0,"27Xn9pn3BBYKIurqZc5td1"],-15]],[1,"4eX4tk+PpEhrbQwxASF8U5",null,null,null,1,0],[1,0,3.535,0]],[4,"bg",33554432,2,[[2,-17,[0,"6fcqi30JxG4IwqLYhEUjpM"],[5,810.16,119.3]],[61,1,0,-18,[0,"4erEVkXRVHy4J4pZtJimv+"],[4,3707764735],0]],[1,"e8oKc/079BYJXsZxDMD8nw",null,null,null,1,0]],[62,2,[0,"6eUnmHr0hHO4uMOGS+1Brk"],[1]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,-2,5,0,0,2,0,9,5,0,0,2,0,-1,4,0,-2,3,0,0,3,0,0,3,0,0,3,0,6,4,0,0,3,0,0,4,0,0,4,0,4,1,18],[0,0,5],[2,-1,10],[9,5,5]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["20g1ukYUVPvKWKBRznAKo+"]}],[3],0,[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[10]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["24xBnqY6hOoanQf8RpSJu8"]}],[3],0,[],[],[]],[[{"name":"atom","rect":{"x":0,"y":0,"width":31,"height":31},"offset":{"x":0,"y":0},"originalSize":{"width":31,"height":31},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-15.5,-15.5,0,15.5,-15.5,0,-15.5,15.5,0,15.5,15.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,31,31,31,0,0,31,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-15.5,"y":-15.5,"z":0},"maxPos":{"x":15.5,"y":15.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[11]],[[{"name":"loading_imgf_title_03","rect":{"x":3,"y":1257,"width":720,"height":532},"offset":{"x":0,"y":0},"originalSize":{"width":720,"height":532},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[1]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["3390l/GWpN67S/2A9K95nF"]}],[3],0,[],[],[]],[[{"name":"shuzi","rect":{"x":0,"y":0,"width":458,"height":45},"offset":{"x":0,"y":0},"originalSize":{"width":458,"height":45},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-229,-22.5,0,229,-22.5,0,-229,22.5,0,229,22.5,0],"indexes":[0,1,2,2,1,3],"uv":[0,45,458,45,0,0,458,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-229,"y":-22.5,"z":0},"maxPos":{"x":229,"y":22.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[12]],[[{"name":"default_round_box_border","rect":{"x":1460,"y":646,"width":58,"height":58},"offset":{"x":0,"y":0},"originalSize":{"width":58,"height":58},"rotated":false,"capInsets":[17,24,21,19],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"xqbz2","rect":{"x":1441,"y":472,"width":41,"height":39},"offset":{"x":0,"y":0},"originalSize":{"width":41,"height":39},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"anniu1","rect":{"x":776,"y":1624,"width":37,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":37,"height":40},"rotated":false,"capInsets":[15,17,13,17],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[1]],[[{"name":"black_dot","rect":{"x":11,"y":1679,"width":1,"height":1},"offset":{"x":0.5,"y":-0.5},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"Dialogue"],[12,"Dialogue",33554432,[-5,-6],[[2,-2,[0,"c3+FsAbWpEVqW9zdO2gxx2"],[5,750,1334]],[17,-3,[0,"60q3SmRL1NRo4BCpjHFOSo"]],[63,-4,[0,"d5JFG1d2JAALbaj4GjBowd"]]],[1,"04ouyg4ulAsLUlu0tiWkjv",null,null,null,-1,0]],[49,"down",33554432,[-10,-11,-12,-13,-14],[[[2,-7,[0,"acTUBV4GhA/4Ya8yXbd0V4"],[5,100,150]],-8,[64,"模拟fgui控制器","2个按钮",-9,[0,"a2zpq9Kw5M9bUMjlQJABdG"],[[33,"2个按钮"],[33,"1个按钮"]]]],4,1,4],[1,"f5h3cBCHtA3bKV9113zCiF",null,null,null,1,0],[1,0,-109.65,0]],[43,"default_round_box",33554432,1,[-18,2],[[2,-15,[0,"f7NISe7HdAD68SLfhnddy8"],[5,850,369.3]],[10,1,0,-16,[0,"e71ctEmpxFC4KlSYRZNz/a"],3],[17,-17,[0,"eaz1/ZksFA7YTZxTvn2BLM"]]],[1,"605qfF1NNPzaFCfuRr3yjE",null,null,null,1,0],[1,0.7,0.7,1]],[4,"bg",33554432,1,[[2,-19,[0,"f7NISe7HdAD68SLfhnddy8"],[5,750,1334]],[16,0,-20,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,1677721600],0],[14,45,2,2,-21,[0,"cfsbZ6R1lPboT5B5cLpqTQ"]],[36,"激活时渐显",-22,[0,"73+k+oz/lGiYURm/1K1bfJ"]]],[1,"7bbaeZmHpMKZO6zHw7sJyM",null,null,null,1,0]],[3,"row_line",33554432,2,[[2,-23,[0,"f7NISe7HdAD68SLfhnddy8"],[5,850,2]],[16,0,-24,[0,"e71ctEmpxFC4KlSYRZNz/a"],[4,4293980400],1],[65,41,-375,-375,590,-25,[0,"f2Pa+acuVElrxPws0nbk2X"]],[11,"子控制器",-26,[0,"65Z/RuTY9N86RhCkkaHPat"],[[7,"2个按钮"],[7,"1个按钮"]]]],[1,"6a9XC4rVxMY6R4/k/7oG3O",null,null,null,1,0],[1,0,74,0]],[3,"LabelContent",33554432,3,[[2,-27,[0,"69hvAj7RZEQLEdOwExKWmO"],[5,550,69.3]],[30,"删除后，将删除",44,44,55,3,-28,[0,"b0mh2ctL1HnJ/WI6d2X3Fr"],[4,4278190080]],[60,"自动撑开目标节点Size",true,true,300,300,-30,[0,"35NBMelmlDqKMy6CTk+58U"],3,[-29]]],[1,"deAzyeERxOSZqcCBwx0jZC",null,null,null,1,0],[1,0,54.094,0]],[8,"Left",33554432,2,[-33],[[2,-31,[0,"ad7zJ2tOlFe71psLQnu74q"],[5,425,150]],[11,"子控制器",-32,[0,"83RdCeSrdM0a3E7uZTavwa"],[[7,"2个按钮"],[19,"1个按钮",false]]]],[1,"e3nPujFtRFT5ysZ7Ld7gas",null,null,null,1,0],[1,-212.5,0,0]],[4,"LabelLeft",33554432,7,[[2,-34,[0,"c68UOAlNhN171Umca6yVvF"],[5,88,69.3]],[24,"确定",44,44,55,true,-35,[0,"2frm37uaJHQr0AEEaYyM82"],[4,4278190080]],[11,"子控制器",-36,[0,"25bkPujkJIK7xQb6qZ4fly"],[[7,"2个按钮"],[7,"1个按钮"]]]],[1,"137tLg6xhO55/DzHPSuI43",null,null,null,1,0]],[8,"Right",33554432,2,[-39],[[2,-37,[0,"67oNZWqtVAIJATGn/Y6X0D"],[5,425,150]],[11,"子控制器",-38,[0,"4fjtfkittCjJgEdhwMwmIf"],[[7,"2个按钮"],[19,"1个按钮",false]]]],[1,"43+qKwt9xIZq1wSA/tSO1u",null,null,null,1,0],[1,212.5,0,0]],[4,"LabelRight",33554432,9,[[2,-40,[0,"1eQ1sz/VRJILiBuGniLkcb"],[5,88,69.3]],[24,"删除",44,44,55,true,-41,[0,"d9Oi6xaKpFLpfkd7zNYjhR"],[4,4278190080]],[11,"子控制器",-42,[0,"62dTsA+3ZGXpNDEwdTiuWx"],[[7,"2个按钮"],[7,"1个按钮"]]]],[1,"70YwHbu49LDpuBhbT83Ufq",null,null,null,1,0]],[4,"col_line",33554432,2,[[2,-43,[0,"92mJNAm45MvLcNyIz3Ng5l"],[5,2,150]],[16,0,-44,[0,"12rVtQQyxNZberlHY07Nl+"],[4,4293980400],2],[11,"子控制器",-45,[0,"37gtcyyNJFxK0CmGJNwWUR"],[[7,"2个按钮"],[19,"1个按钮",false]]]],[1,"71uz6WFhhJPJ0x/tdQWqJ9",null,null,null,1,0]],[28,"Center",false,33554432,2,[-48],[[2,-46,[0,"efopwdZ1JKBqssDwi+U06h"],[5,850,150]],[11,"子控制器",-47,[0,"d1b7BxH0lA9rYShYioCyKq"],[[19,"2个按钮",false],[7,"1个按钮"]]]],[1,"7acC1i1VdBNbmpgm22/WVs",null,null,null,1,0]],[4,"LabelCenter",33554432,12,[[2,-49,[0,"61lAVJX5xOkIh6tSX8Z0Bp"],[5,88,69.3]],[24,"确定",44,44,55,true,-50,[0,"b9eU0I695JtpEVLcj2G8F1"],[4,4278190080]],[11,"子控制器",-51,[0,"7csoZMX0RJh5MxdrYCOUOC"],[[7,"2个按钮"],[7,"1个按钮"]]]],[1,"89WdKMOW9O5aTcAAHiZLwY",null,null,null,1,0]],[18,4,2,[0,"adtmMYN5NGMLz23pmhJdx1"]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,3,0,0,2,0,-2,14,0,0,2,0,-1,5,0,-2,7,0,-3,9,0,-4,11,0,-5,12,0,0,3,0,0,3,0,0,3,0,-1,6,0,0,4,0,0,4,0,0,4,0,0,4,0,0,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,-1,14,0,0,6,0,0,7,0,0,7,0,-1,8,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,-1,10,0,0,10,0,0,10,0,0,10,0,0,11,0,0,11,0,0,11,0,0,12,0,0,12,0,-1,13,0,0,13,0,0,13,0,0,13,0,4,1,2,8,3,51],[0,0,0,0],[2,2,2,2],[2,2,2,6]],[[[9,"prefab"],[44,"prefab",33554432,[[22,-2,[0,"b4e66ui19PxLSYjCH3hanR"]],[70,1,49,0.20000000298023224,0.5,360,360,3.369999885559082,50,30.31999969482422,-47.369998931884766,-47.369998931884766,-142.11000061035156,0,190.7899932861328,0,49,-3,[0,"caqYLHX+NNQq0aetZuaqrF"],[0,7,7],[0,0.25,0.8600000143051147],[4,2740373706],[4,3333292005],[4,3591610797],[4,3170498923],0,1]],[1,"d1NOK84d1A07Sl7/ARDpJ3",null,null,null,-1,0],[1,0,0,-1]]],0,[0,3,1,0,0,1,0,0,1,0,4,1,3],[0,0],[11,2],[13,3]],[[{"name":"top","rect":{"x":3,"y":771,"width":750,"height":684},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":684},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"IndexBgUI"],[12,"IndexBgUI",33554432,[-5],[[2,-2,[0,"dbZVMkoSpNg5Z0tY4ilqmV"],[5,750,1334]],[71,"UI组件(勿使用cocos生命周期)",true,-3,[0,"8f/sxMCGJFNb9zU3JIyN25"]],[14,45,750,1334,-4,[0,"c51Uv7YTJFKa/gPjfjf7s2"]]],[1,"93qTd500dAdaXG9iF1ovyR",null,null,null,-1,0]],[21,"Node-001",33554432,1,[-9,-10],[[2,-6,[0,"b5wh19yEdOcaYzo7obfej+"],[5,750,1334]],[72,"只显示一个子节点",-7,[0,"26XCltRWJOqbP+DjbT0WXt"]],[14,45,100,100,-8,[0,"40rcr8+RpF1o7BLeSQ+RPB"]]],[1,"dc74jt9bZDrJIMOj1xWe5Q",null,null,null,1,0]],[28,"bg",false,33554432,2,[-13,-14,-15],[[2,-11,[0,"08rIzV/BBKALXkkB/ruw+N"],[5,750,1334]],[34,45,100,100,-12,[0,"f91rPI9hdBYro4F+mCIiGw"],1]],[1,"03kSHkdIVO5LL8ORTEbE9A",null,null,null,1,0]],[21,"Node",33554432,2,[-18],[[2,-16,[0,"7fQj47sSJOkpFMVG9p2fcQ"],[5,750,1334]],[14,45,100,100,-17,[0,"46Tm65xfZJQ6Ewhm0WnKQm"]]],[1,"37BQcE6DVE3bp3fTS3l48T",null,null,null,1,0]],[4,"default_sprite_splash",33554432,4,[[2,-19,[0,"ddDTsbXHBJ3aL2Ti9PiVW7"],[5,750,1334]],[16,0,-20,[0,"91y8sZSItKH6oCdtnnHIMh"],[4,4294963949],0],[34,45,2,2,-21,[0,"9cgpq4X6BOWr8b9xBzZf/j"],1]],[1,"8ezJeEL9RDcZTRoJKemmYq",null,null,null,1,0]],[4,"Sprite_bg_mid",33554432,3,[[2,-22,[0,"56RrWJ7vBNELJIIq3yIuej"],[5,750,1334]],[10,2,0,-23,[0,"bdlbyRwulLg7Xfco3bc6nq"],1],[14,45,750,14,-24,[0,"7cUXhoaqxKz7/iBD4D3GKZ"]]],[1,"f7trpUlOlPa7hNYKfExd2r",null,null,null,1,0]],[3,"Sprite_bg_top",33554432,3,[[2,-25,[0,"39ptREdmBNAKbDVxwnFKiG"],[5,750,684]],[10,2,0,-26,[0,"9d9M4KGT9C6o2v0K8P02oD"],2],[35,41,750,-27,[0,"b9XFprCvlDWr7C2jEJhPIs"]]],[1,"4eeqCNt/NCDZ2REcgIiK63",null,null,null,1,0],[1,0,325,0]],[3,"Sprite_bg_bottom",33554432,3,[[2,-28,[0,"25WngeWddJcq6YgGuJig+c"],[5,750,650]],[10,2,0,-29,[0,"c4vuDSHYhDaZ7Cog9d/nTB"],3],[35,44,750,-30,[0,"88+dc7YBdDWbpKTTQA+UAT"]]],[1,"a1fp2EB2dMKp8CWvzeKTNl",null,null,null,1,0],[1,0,-342,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,-2,3,0,0,3,0,0,3,0,-1,6,0,-2,7,0,-3,8,0,0,4,0,0,4,0,-1,5,0,0,5,0,0,5,0,0,5,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,4,1,30],[0,0,0,0],[2,2,2,2],[2,14,15,16]],[[{"name":"default_radio_button_off","rect":{"x":693,"y":1495,"width":26,"height":26},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[13,13,13,13],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[37,"gradualChange",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[7],[7]],[[{"name":"wait_circle","rect":{"x":1429,"y":727,"width":114,"height":114},"offset":{"x":0,"y":0},"originalSize":{"width":114,"height":114},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"default_circle","rect":{"x":1254,"y":521,"width":200,"height":200},"offset":{"x":0,"y":0},"originalSize":{"width":200,"height":200},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["54TknWPwVPqJqeCR+Y/Czo"]}],[3],0,[],[],[]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[17]],[[{"name":"loading_bg_letter","rect":{"x":3,"y":3,"width":981,"height":1248},"offset":{"x":0,"y":0},"originalSize":{"width":981,"height":1248},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[1]],[[[37,"color",[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"IS_COLOR":true}]]],0,0,[0],[7],[18]],[[{"name":"loading_btn_02","rect":{"x":1429,"y":117,"width":248,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":248,"height":108},"rotated":false,"capInsets":[119,48,108,48],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"dot","rect":{"x":1378,"y":1646,"width":31,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":31,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"PrivacyUI"],[12,"PrivacyUI",33554432,[-4],[[2,-2,[0,"farK9JMVBPRbrOA7QzdYD0"],[5,750,1334]],[74,"UI组件(勿使用cocos生命周期)",true,true,0.6,-3,[0,"abpKbYUWNFC50iJXQxMFCO"]]],[1,"c46/YsCPVOJYA4mWEpNYRx",null,null,null,-1,0]],[21,"content",33554432,1,[-8,-9,-10,-11,-12,-13,-14,-15,-16],[[2,-5,[0,"00UJM8VSBHupILL6yfsw83"],[5,640,700]],[10,1,0,-6,[0,"a1zkvq/UFDxoI0aeuaDVJ9"],3],[17,-7,[0,"ffwPx7s5JK8rdfBdRuAygd"]]],[1,"c4fisS0x5DIrpnrXOBZmVY",null,null,null,1,0]],[8,"Node",33554432,2,[-19,-20,-21,-22,-23],[[23,-17,[0,"a13VUFJXFMR6CsyryZKE8H"],[5,380,100],[0,0,0.5]],[75,1,1,-18,[0,"cebGuCEgpAWbuqFPBPHinV"]]],[1,"deEwJ8x1dIj6HWSeXLUZJI",null,null,null,1,0],[1,-255.5,-171.662,0]],[8,"Confirm",33554432,2,[-27],[[2,-24,[0,"6cVdAvTC5GCKkP5x9NXmUv"],[5,220,80]],[10,1,0,-25,[0,"18ZizBZhpCBoxpx+m1szTT"],0],[38,"按钮组件",true,-26,[0,"e0yhsvaZxD8prG/supKd3k"],[5,[6]]]],[1,"80kYs5/R5NpaDrrPi/cPgA",null,null,null,1,0],[1,130,-269.947,0]],[8,"Cancel",33554432,2,[-31],[[2,-28,[0,"baxgBoSIVPjKcVbt4J+ixS"],[5,220,80]],[10,1,0,-29,[0,"d0Ll+SDjpF0aTnuY/wFpgo"],1],[77,"按钮组件",-30,[0,"87lyz4//pHqbU1cQbwY2Bo"],[5,[6]]]],[1,"23PkBOgFRHeLn8xy1+a+TM",null,null,null,1,0],[1,-130,-269.947,0]],[3,"Label_dec",33554432,2,[[23,-32,[0,"eayJvz7uBDpahpXIc/96yz"],[5,511,58.75999999999999],[0,0,0.5]],[55,"欢迎您使用《倒水冲冲冲》，我们将严格遵守相关法律法规和隐私政策以保护您的个人信息。",0,0,20,20,26,3,-33,[0,"8aXE7KNTBKVLnn+ePRynZJ"],[4,4278190080]],[18,16,-34,[0,"9631IoLqtFn6AcTVwlPX0S"]]],[1,"2eB6SqjChG9J6OfBhyIxhq",null,null,null,1,0],[1,-255.5,-65.831,0]],[4,"Label",33554432,4,[[2,-35,[0,"ebABND7z5HrZde5NJkxl+t"],[5,60,88.2]],[56,"同意",30,30,70,1,-36,[0,"c3tpx4yBFEBpogFXVzibrC"]]],[1,"dcnKBQE9BMSorMJpfR2u5z",null,null,null,1,0]],[4,"Label",33554432,5,[[2,-37,[0,"96jkqslIRHFYfuTnh9n2BT"],[5,60,88.2]],[15,"拒绝",30,30,70,1,-38,[0,"58f2D6DLdOnrokCx4HM4G/"],[4,4289703855]]],[1,"6a/aUCIj5DcpR5H1RUvAWU",null,null,null,1,0]],[3,"tubiao",33554432,2,[[2,-39,[0,"b2F6aqvDJH7pkcZJQgRpHI"],[5,308,201]],[13,-40,[0,"fdDLagIH5FJaKDNLGyYD7b"],2]],[1,"8e5NTruTVI/JC/SaiLdCpx",null,null,null,1,0],[1,0,174.537,0]],[3,"Label",33554432,2,[[2,-41,[0,"2a8QJkKvNLwZkcCssUy9IP"],[5,320,88.2]],[57,"我们保护您的隐私",40,70,true,1,-42,[0,"3bTylvtzZCk6a0rEUdFYql"],[4,4278190080]]],[1,"a9fHX1/2lOk71F0lHbh15s",null,null,null,1,0],[1,0,16.641,0]],[3,"Label-002",33554432,2,[[2,-43,[0,"00ruvbdk9DMq9Qb/fYeU4V"],[5,260,55.44]],[15,"上海爱乐游网络技术有限公司",20,20,44,1,-44,[0,"f19nvaETpBnp65sEh4BtZV"],[4,4278190080]]],[1,"02G1dqlGFHsreoaMYvCT+h",null,null,null,1,0],[1,0,-123.078,0]],[3,"Label-003",33554432,3,[[2,-45,[0,"d7AF5+TOpPraEAznP1WCl5"],[5,140,55.44]],[15,"请阅读并同意《",20,20,44,1,-46,[0,"f0+n0gVCRH8Lxgvnjgw4tC"],[4,4278190080]]],[1,"d8dyswZLNODaECFW40ywl/",null,null,null,1,0],[1,70,0,0]],[3,"Label-004",33554432,3,[[2,-47,[0,"5cxJuzUEJC4rUfwjOIKBww"],[5,80,55.44]],[31,"用户协议",20,20,44,true,1,-48,[0,"4cqOvY/zVLa72vdhgUMCKI"],[4,4294938436]]],[1,"511i2AbLFNJZQ4jIG35yUL",null,null,null,1,0],[1,180,0,0]],[3,"Label-005",33554432,3,[[2,-49,[0,"beTMto3i1Ih4OcRbXdLpvt"],[5,60,55.44]],[15,"》和《",20,20,44,1,-50,[0,"e4R+trg3BIBLWMtLHC4rU1"],[4,4278190080]]],[1,"4erxvttfdIj5qaXp94rshM",null,null,null,1,0],[1,250,0,0]],[3,"Label-006",33554432,3,[[2,-51,[0,"baDds8oqNOop+TASNtEfoG"],[5,80,55.44]],[31,"隐私协议",20,20,44,true,1,-52,[0,"52UKo85PVGgpHwk2ldN3E0"],[4,4294938436]]],[1,"b2ZkecFolBb6DVMkosdgHJ",null,null,null,1,0],[1,320,0,0]],[3,"Label-007",33554432,3,[[2,-53,[0,"2b/qVV4FFIL6jge0ki7vlG"],[5,20,55.44]],[15,"》",20,20,44,1,-54,[0,"2b+9TPMRhGmb3FAOWYnYc4"],[4,4278190080]]],[1,"96rkRHK2ZJWrTxmguDngp5",null,null,null,1,0],[1,370,0,0]],[3,"AUser",33554432,2,[[2,-55,[0,"e33v6WsY5Mp5XqgDWQdzul"],[5,122,57]]],[1,"a0TPVxbSxAkZzgY3sgFBn1",null,null,null,1,0],[1,-74.559,-173.713,0]],[3,"APrivacy",33554432,2,[[2,-56,[0,"8ey3xUCWBAMKrooRGyj+VM"],[5,122,57]]],[1,"baihkq9llEap+6peiR78e5",null,null,null,1,0],[1,64.703,-173.713,0]]],0,[0,3,1,0,0,1,0,0,1,0,-1,2,0,0,2,0,0,2,0,0,2,0,-1,4,0,-2,5,0,-3,17,0,-4,18,0,-5,9,0,-6,10,0,-7,6,0,-8,11,0,-9,3,0,0,3,0,0,3,0,-1,12,0,-2,13,0,-3,14,0,-4,15,0,-5,16,0,0,4,0,0,4,0,0,4,0,-1,7,0,0,5,0,0,5,0,0,5,0,-1,8,0,0,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,0,16,0,0,17,0,0,18,0,4,1,56],[0,0,0,0],[2,2,2,2],[19,20,21,6]],[[{"name":"default_sprite_splash","rect":{"x":3,"y":1679,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"loading_imgf_title_02","rect":{"x":873,"y":1571,"width":90,"height":47},"offset":{"x":0,"y":0},"originalSize":{"width":90,"height":47},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[1]],[[{"name":"btn23","rect":{"x":1549,"y":587,"width":331,"height":132},"offset":{"x":0,"y":0},"originalSize":{"width":331,"height":132},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"IndexUI"],[12,"IndexUI",33554432,[-5,-6,-7,-8,-9,-10],[[2,-2,[0,"dbZVMkoSpNg5Z0tY4ilqmV"],[5,750,1334]],[80,"UI组件(勿使用cocos生命周期)",false,true,-3,[0,"cdhI6aaixJM68lLzidWRM6"]],[66,750,1334,-4,[0,"052RueGrxLJKsWgdLWhpwQ"]]],[1,"93qTd500dAdaXG9iF1ovyR",null,null,null,-1,0]],[45,"ButtonFullscreen",false,33554432,1,[-19,-20],[[2,-11,[0,"4bIZqQJbtLaIw+GGqlwYTc"],[5,100,40]],[10,1,0,-12,[0,"17o6XWc2dON4AIKBzIpd3k"],4],[81,2,-15,[0,"55f6h66uVIjYtSaBkq1dj7"],[[79,"9bd43IPuLZPLb+hCKd8VNlA","onFullscreenClicked",-14]],[4,4292269782],-13,5,6,7,8],[82,-18,[0,"adaJFDQTBH5ZArflBntMB+"],-17,-16]],[1,"f2HEKzB1hMyb1Q2SENZctk",null,null,null,1,0],[1,41.549,593.02,0]],[8,"Node",33554432,1,[-26,-27],[[23,-21,[0,"bbpA1HMq1GZ4GdpBRDLYAb"],[5,100,316],[0,0.5,0]],[76,1,2,26,-22,[0,"4fb2ZcNS9DWbF/EMLB9OQF"]],[25,"移动组件",false,2000,-24,[0,"57CjxfpjVGN5SdjeTB7NXM"],-23,[[26,[1,0,-700,0],[5,[6]],[5,[6]],[5,[6]]]]],[67,20,0.12,false,-25,[0,"c75ZAafFdKIK/pGPDpGg63"]]],[1,"713HvAufFPap83z3HkitYH",null,null,null,1,0],[1,0,-506.92,0]],[8,"Setting",33554432,1,[-33],[[2,-28,[0,"51OE7X0nJG3b01kVHVTego"],[5,94,94]],[68,9,0.045,0.025,false,false,-29,[0,"e0kAx4eqpOca3/Pb8GEwLr"]],[78,"按钮组件","setting/prefab/SettingUI",-30,[0,"0akPJOA8NFsoIf/+XN81xb"],[5,[6]]],[25,"移动组件",false,2000,-32,[0,"c6TcikdcxASLJ5fMKE6fdE"],-31,[[26,[1,-300,0,0],[5,[6]],[5,[6]],[5,[6]]]]]],[1,"25vXudlqtMvKGdvogOiAEO",null,null,null,1,0],[1,-294.25,586.65,0]],[8,"logo2",33554432,1,[-38],[[2,-34,[0,"b8L+QWjwVBILBvh0MGiT4W"],[5,608,139]],[25,"移动组件",false,2000,-36,[0,"15Nv+vfSBFW7Tk1jbMkcCr"],-35,[[26,[1,0,700,0],[5,[6]],[5,[6]],[5,[6]]]]],[69,17,0.2,false,-37,[0,"146dNSjRpDJaN7eBtepw2R"]]],[1,"2bSjTwsDtI7qxA+CoCA8z5",null,null,null,1,0],[1,0,330.7,0]],[12,"ADefault",33554432,[-42],[[2,-39,[0,"ad0KRgfk9LsqhZxvJiLHQL"],[5,332,158]],[38,"按钮组件",true,-40,[0,"f511xlgaNCM4OJPlVKHLH3"],[5,[6]]],[13,-41,[0,"f7hO9/2chGNpW/XkHJ0EKf"],3]],[1,"e1+KXspFVAOpUgt8QZ5JgV",null,null,null,1,0]],[4,"max",33554432,1,[[2,-43,[0,"58Ilg15QNDbbevGpizN/Cb"],[5,750,1334]],[83,"可视范围控制",-44,[0,"8ddQDnnzJBYInGe0yRjP6h"]],[18,9,-45,[0,"09I5SxyqNIQrozNIUj33QL"]]],[1,"aabuZmuQNMkpcwTcy9IR8V",null,null,null,1,0]],[8,"Level",33554432,3,[-48],[[2,-46,[0,"d63g1KgO9H1oeMvOJZVoYF"],[5,331,132]],[13,-47,[0,"cflQOGYw1Ki68nE3thou4M"],2]],[1,"6eFYcyvLFPMIenmjBF817n",null,null,null,1,0],[1,0,250,0]],[46,"on",512,33554432,2,[[2,-49,[0,"65cVnaQtdHsoBh06cgGoGM"],[5,100,40]],[32,"вкл",20,20,1,false,-50,[0,"b8pcB7sthKi7AWgf2uMG8d"],[4,4278190080]]],[1,"90y7WNd7hFQL8QjEabb4wQ",null,null,null,1,0]],[47,"off",512,false,33554432,2,[[2,-51,[0,"caaWGWRpRCEYAXQrwT/hZR"],[5,100,40]],[32,"выкл",20,20,1,false,-52,[0,"a0c83ughBMbrSGAhMWGFlu"],[4,4278190080]]],[1,"1fwm+acTpCYJ0/+nBVoitS",null,null,null,1,0]],[4,"setting",33554432,4,[[2,-53,[0,"f1f7DEwFZMLoaQwtuVC2wF"],[5,105,105]],[13,-54,[0,"acEmTtnBJInYhocbhCijTo"],0]],[1,"ffayzjJf5CiZdS+HgeMvc/",null,null,null,1,0]],[4,"logo2",33554432,5,[[2,-55,[0,"67NaJUpDJABai+UOyFN0rE"],[5,704,137]],[13,-56,[0,"9f4K4h1VpP56FwWOsYrkDW"],1]],[1,"18Jk8FHudGBbYLAG1AONc+",null,null,null,1,0]],[3,"Node",33554432,8,[[2,-57,[0,"b0tOO/ejBC/4I/2i6UJhrg"],[5,195,51]],[39,"模拟fgui装载器",true,"7a50abdd-0c64-44c4-995f-5efb4785963e@f9941",false,true,false,-58,[0,"f12dDayVxG65ux6DFJonz+"]]],[1,"a1tH6J6Y9FJ5rmfOTkD9aW",null,null,null,1,0],[1,0,8,0]],[8,"Node",33554432,3,[6],[[2,-59,[0,"e7OtEvSyJKI55GhnxkE3m0"],[5,100,158]]],[1,"80ai9pzYpPHLDJuq4MnOtL",null,null,null,1,0],[1,0,79,0]],[3,"Node",33554432,6,[[2,-60,[0,"22uaQK4HFLxIy5n0LyRI2K"],[5,194,50]],[39,"模拟fgui装载器",true,"071c315f-8dc6-40e1-a091-f9e1bff2568f@f9941",false,true,false,-61,[0,"32cYX0Hk5LQ7rGW2D0vwdm"]]],[1,"4dMGCTuddEf5v3iZrzsNJQ",null,null,null,1,0],[1,0,8,0]],[3,"btns",33554432,1,[[50,-62,[0,"8fNcBO8AhNBYw5yjo2HDLA"],[0,0.5,0]],[18,4,-63,[0,"e19F9tTuZIi6sKwg3l97Zo"]]],[1,"17eH4o73VItaFRCbi/Wbi5",null,null,null,1,0],[1,0,-667,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,5,0,-3,7,0,-4,3,0,-5,16,0,-6,2,0,0,2,0,0,2,0,12,2,0,6,2,0,0,2,0,13,10,0,14,9,0,0,2,0,-1,9,0,-2,10,0,0,3,0,0,3,0,6,3,0,0,3,0,0,3,0,-1,8,0,-2,14,0,0,4,0,0,4,0,0,4,0,6,4,0,0,4,0,-1,11,0,0,5,0,6,5,0,0,5,0,0,5,0,-1,12,0,0,6,0,0,6,0,0,6,0,-1,15,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,-1,13,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,15,0,0,15,0,0,16,0,0,16,0,4,1,6,8,14,63],[0,0,0,0,0,0,0,0,0],[2,2,2,2,2,15,16,17,18],[22,23,24,25,4,4,4,26,27]],[[[27,"../main/effect/builtin-color",[{"hash":2810521540,"name":"../main/effect/builtin-color|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","typename":"sampler2D","type":28,"count":1,"stageFlags":16,"tags":{"builtin":"local"},"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"ALPHA_TEST_DATA","stageFlags":16,"binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if USE_LOCAL\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n  layout(std140) uniform ALPHA_TEST_DATA {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 color;\n#if USE_TEXTURE\n  in vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n    #if IS_COLOR\n          o.rgb = color.rgb;\n          o.a *=color.a;\n    #endif\n  ALPHA_TEST(o);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\n  uniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n      #define LIGHT_MAP_TYPE_DISABLED 0\n  #define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n  #define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n  #define REFLECTION_PROBE_TYPE_NONE 0\n  #define REFLECTION_PROBE_TYPE_CUBE 1\n  #define REFLECTION_PROBE_TYPE_PLANAR 2\n  #define REFLECTION_PROBE_TYPE_BLEND 3\n  #define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n      #define LIGHT_TYPE_DIRECTIONAL 0.0\n  #define LIGHT_TYPE_SPHERE 1.0\n  #define LIGHT_TYPE_SPOT 2.0\n  #define LIGHT_TYPE_POINT 3.0\n  #define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n  #define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n  #define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n  #define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n  #define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n  #define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n  #define TONE_MAPPING_ACES 0\n  #define TONE_MAPPING_LINEAR 1\n  #define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n  #ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n    #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n  #endif\n  #ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n    #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n  #endif\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_LOCAL\n    pos = cc_matWorld * pos;\n  #endif\n  #if USE_PIXEL_ALIGNMENT\n    pos = cc_matView * pos;\n    pos.xyz = floor(pos.xyz);\n    pos = cc_matProj * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  uv0 = a_texCoord;\n  #if SAMPLE_FROM_RT\n    uv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n  #endif\n  color = a_color;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\n  return vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\n  return texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\n      uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n    if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n    if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\n  varying vec2 uv0;\n  uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n    #if IS_GRAY\n      float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\n      o.r = o.g = o.b = gray;\n    #endif\n  #endif\n    #if IS_COLOR\n          o.rgb = color.rgb;\n          o.a *=color.a;\n    #endif\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["USE_LOCAL"]}],"samplerTextures":[{"name":"cc_spriteTexture","defines":["USE_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":56,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":1}},"defines":[{"name":"USE_LOCAL","type":"boolean"},{"name":"SAMPLE_FROM_RT","type":"boolean"},{"name":"USE_PIXEL_ALIGNMENT","type":"boolean"},{"name":"CC_USE_EMBEDDED_ALPHA","type":"boolean"},{"name":"USE_ALPHA_TEST","type":"boolean"},{"name":"USE_TEXTURE","type":"boolean"},{"name":"IS_GRAY","type":"boolean"},{"name":"IS_COLOR","type":"boolean"}]}],[{"passes":[{"program":"../main/effect/builtin-color|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[{"name":"idle_mode","rect":{"x":848,"y":1519,"width":159,"height":50},"offset":{"x":0,"y":0.5},"originalSize":{"width":195,"height":51},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"loading_imgf_title_01","rect":{"x":729,"y":1571,"width":138,"height":47},"offset":{"x":0,"y":0},"originalSize":{"width":138,"height":47},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[1]],[[{"name":"butter2","rect":{"x":110,"y":1527,"width":363,"height":145},"offset":{"x":0,"y":0},"originalSize":{"width":363,"height":145},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"LoadingWait"],[12,"LoadingWait",33554432,[-5,-6],[[2,-2,[0,"c3+FsAbWpEVqW9zdO2gxx2"],[5,750,1334]],[17,-3,[0,"b2fRgQ/zBFbo3ZX9b/TvSL"]],[84,-4,[0,"9agHl3jMxN5o9V5u34QwoT"]]],[52,"04ouyg4ulAsLUlu0tiWkjv",null,null,[],-1,0]],[4,"sprite",33554432,1,[[2,-7,[0,"ac6Fur9PtD1Kuzy9hmZfwf"],[5,750,1334]],[16,0,-8,[0,"ceXyRjlKNDi7KbrkDGeeLf"],[4,1744830464],0],[14,45,232,80.4,-9,[0,"98HBrsPkFKvZ32YVLyZYa7"]],[36,"激活时渐显",-10,[0,"d9P/PNMEVPGb4DXDgioZf+"]]],[1,"39Yx5Q0bVN6oEE4fQJTOYy",null,null,null,1,0]],[4,"wait_circle",33554432,1,[[2,-11,[0,"f0k12i0B9GEoxTsWhlQSUS"],[5,114,114]],[13,-12,[0,"b5tWCBfShBFbq6/yVRAye6"],1],[85,"内置tween",5,-13,[0,"9bY5a6R0FGUbRsvYMTSeLp"]]],[1,"e7wgFrB01O2rv+nY/yIoJv",null,null,null,1,0]]],0,[0,3,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,0,2,0,0,3,0,0,3,0,0,3,0,4,1,13],[0,0],[2,2],[2,28]],[[[86,"click_sound",".mp3",0.182857],-1],0,0,[],[],[]],[[{"name":"anniu2","rect":{"x":729,"y":1624,"width":44,"height":41},"offset":{"x":0,"y":0},"originalSize":{"width":44,"height":41},"rotated":true,"capInsets":[18,17,16,17],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[1]],[[{"name":"default_round_box","rect":{"x":1615,"y":1608,"width":50,"height":50},"offset":{"x":0,"y":0},"originalSize":{"width":50,"height":50},"rotated":false,"capInsets":[20,21,20,22],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"light_effect","rect":{"x":693,"y":759,"width":730,"height":730},"offset":{"x":0,"y":0},"originalSize":{"width":730,"height":730},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[20,"label-atlas",39.6,{"commonHeight":45,"fontSize":39,"atlasName":"shuzi","fontDefDictionary":{"48":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":0,"y":0,"width":46,"height":45}},"49":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":46,"y":0,"width":46,"height":45}},"50":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":92,"y":0,"width":46,"height":45}},"51":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":138,"y":0,"width":46,"height":45}},"52":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":184,"y":0,"width":46,"height":45}},"53":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":230,"y":0,"width":46,"height":45}},"54":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":276,"y":0,"width":46,"height":45}},"55":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":322,"y":0,"width":46,"height":45}},"56":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":368,"y":0,"width":46,"height":45}}},"kerningDict":{}}]],0,0,[0],[5],[29]],[[{"name":"2","rect":{"x":1486,"y":472,"width":63,"height":80},"offset":{"x":0,"y":0},"originalSize":{"width":63,"height":80},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["95EkngnxZFbYuFpsqVTaFr"]}],[3],0,[],[],[]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"vertices":{"rawPosition":[-20,-20,0,20,-20,0,-20,20,0,20,20,0],"indexes":[0,1,2,2,1,3],"uv":[0,40,40,40,0,0,40,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-20,"y":-20,"z":0},"maxPos":{"x":20,"y":20,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[30]],[[{"name":"butter22","rect":{"x":1254,"y":166,"width":295,"height":145},"offset":{"x":0,"y":0},"originalSize":{"width":295,"height":145},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"tongyong","rect":{"x":3,"y":3,"width":589,"height":762},"offset":{"x":0,"y":0},"originalSize":{"width":589,"height":762},"rotated":false,"capInsets":[204,159,208,148],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[40,"touchMove",".plist"],-1],0,0,[0],[5],[3]],[[{"name":"4","rect":{"x":1429,"y":1046,"width":81,"height":77},"offset":{"x":0,"y":0},"originalSize":{"width":81,"height":77},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"TipTitleClick"],[29,"TipTitleClick",33554432,[[22,-2,[0,"12W+zinlFK7ZI83Yc4XxzB"]]],[1,"95h2iYYFlMMr5DtcSpMV4J",null,null,null,-1,0]]],0,[0,3,1,0,0,1,0,4,1,2],[],[],[]],[[[27,"../main/effect/gradualChange",[{"hash":3241051885,"name":"../main/effect/gradualChange|sprite-vs:vert|sprite-fs:frag","blocks":[{"name":"Constants","stageFlags":16,"binding":0,"members":[{"name":"startColor","type":16,"count":1},{"name":"endColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":21,"location":1,"defines":[]},{"name":"a_color","format":44,"location":2,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[{"name":"Constants","stageFlags":16,"binding":0,"members":[{"name":"startColor","type":16,"count":1},{"name":"endColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":1,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec2 uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1.0);\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nin vec2 uv;\nlayout(std140) uniform Constants {\n  vec4 startColor;\n  vec4 endColor;\n};\nvec4 lerp(vec4 a, vec4 b, float r) {\n  return a + (b - a) * r;\n}\nvec4 frag () {\n  vec4 o = lerp(startColor, endColor, 1.0 - uv.y);\n  return o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec2 uv;\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1.0);\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvarying vec2 uv;\n   uniform vec4 startColor;\n   uniform vec4 endColor;\nvec4 lerp(vec4 a, vec4 b, float r) {\n  return a + (b - a) * r;\n}\nvec4 frag () {\n  vec4 o = lerp(startColor, endColor, 1.0 - uv.y);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":42,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":2}},"defines":[]}],[{"passes":[{"program":"../main/effect/gradualChange|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"rasterizerState":{"cullMode":0},"depthStencilState":{"depthTest":false,"depthWrite":false},"properties":{"startColor":{"type":16,"value":[1,1,1,1]},"endColor":{"type":16,"value":[1,1,1,1]}}}]}]]],0,0,[],[],[]],[[{"name":"btn","rect":{"x":904,"y":1519,"width":332,"height":158},"offset":{"x":0,"y":0},"originalSize":{"width":332,"height":158},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"default_3_polyon","rect":{"x":1429,"y":231,"width":235,"height":243},"offset":{"x":0,"y":0},"originalSize":{"width":235,"height":243},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"idle_mode2","rect":{"x":3,"y":1527,"width":146,"height":101},"offset":{"x":0,"y":0},"originalSize":{"width":146,"height":101},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"guanbi","rect":{"x":1300,"y":1646,"width":33,"height":33},"offset":{"x":0,"y":0},"originalSize":{"width":33,"height":33},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"default_round_box_project","rect":{"x":1557,"y":1608,"width":52,"height":53},"offset":{"x":0,"y":0},"originalSize":{"width":52,"height":53},"rotated":false,"capInsets":[20,23,18,24],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[20,"label-atlas",65.12,{"commonHeight":74,"fontSize":65,"atlasName":"shuzi","fontDefDictionary":{"48":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":0,"y":0,"width":80,"height":74}},"49":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":80,"y":0,"width":80,"height":74}},"50":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":160,"y":0,"width":80,"height":74}},"51":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":240,"y":0,"width":80,"height":74}},"52":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":320,"y":0,"width":80,"height":74}},"53":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":400,"y":0,"width":80,"height":74}},"54":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":480,"y":0,"width":80,"height":74}},"55":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":560,"y":0,"width":80,"height":74}},"56":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":640,"y":0,"width":80,"height":74}},"57":{"xOffset":0,"yOffset":0,"xAdvance":80,"rect":{"x":720,"y":0,"width":80,"height":74}}},"kerningDict":{}}]],0,0,[0],[5],[31]],[[{"name":"bg","rect":{"x":1557,"y":924,"width":117,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":117,"height":48},"rotated":false,"capInsets":[56,22,57,23],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[9,"TipClick"],[29,"TipClick",33554432,[[22,-2,[0,"12W+zinlFK7ZI83Yc4XxzB"]]],[1,"95h2iYYFlMMr5DtcSpMV4J",null,null,null,-1,0]]],0,[0,3,1,0,0,1,0,4,1,2],[],[],[]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["d8ApKSF85BAY2pedOD8C/B"]}],[3],0,[],[],[]],[[{"name":"shuzi","rect":{"x":1,"y":0,"width":798,"height":73},"offset":{"x":0,"y":0.5},"originalSize":{"width":800,"height":74},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-399,-36.5,0,399,-36.5,0,-399,36.5,0,399,36.5,0],"indexes":[0,1,2,2,1,3],"uv":[1,74,799,74,1,1,799,1],"nuv":[0.00125,0.013513513513513514,0.99875,0.013513513513513514,0.00125,1,0.99875,1],"minPos":{"x":-399,"y":-36.5,"z":0},"maxPos":{"x":399,"y":36.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[32]],[[{"name":"setting","rect":{"x":1429,"y":847,"width":105,"height":105},"offset":{"x":0,"y":0},"originalSize":{"width":105,"height":105},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"fmt":"1","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["dcXQbVHD1JS5nFJ70DsACc"]}],[3],0,[],[],[]],[[{"name":"center","rect":{"x":0,"y":0,"width":750,"height":14},"offset":{"x":0,"y":0},"originalSize":{"width":750,"height":14},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-375,-7,0,375,-7,0,-375,7,0,375,7,0],"indexes":[0,1,2,2,1,3],"uv":[0,14,750,14,0,0,750,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-375,"y":-7,"z":0},"maxPos":{"x":375,"y":7,"z":0}},"packable":false,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[33]],[[{"name":"hongdian","rect":{"x":1339,"y":1646,"width":33,"height":33},"offset":{"x":0,"y":0},"originalSize":{"width":33,"height":33},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"butter222","rect":{"x":1242,"y":1495,"width":295,"height":145},"offset":{"x":0,"y":0},"originalSize":{"width":295,"height":145},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"btn2","rect":{"x":479,"y":1527,"width":363,"height":145},"offset":{"x":0,"y":0},"originalSize":{"width":363,"height":145},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["e76h3/WXhDkJiXhCkydb3F"]}],[3],0,[],[],[]],[[{"name":"shuzi","rect":{"x":3,"y":3,"width":643,"height":69},"offset":{"x":-0.5,"y":-0.5},"originalSize":{"width":650,"height":74},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-321.5,-34.5,0,321.5,-34.5,0,-321.5,34.5,0,321.5,34.5,0],"indexes":[0,1,2,2,1,3],"uv":[3,71,646,71,3,2,646,2],"nuv":[0.004615384615384616,0.02702702702702703,0.9938461538461538,0.02702702702702703,0.004615384615384616,0.9594594594594594,0.9938461538461538,0.9594594594594594],"minPos":{"x":-321.5,"y":-34.5,"z":0},"maxPos":{"x":321.5,"y":34.5,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[34]],[[[27,"../main/effect/textureTo3D",[{"hash":1888643519,"name":"../main/effect/textureTo3D|bonus-unlit-vs:vert|bonus-unlit-fs:frag","blocks":[],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":0,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBiasAndProbeId","format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING"]},{"name":"a_reflectionProbeData","format":44,"isInstanced":true,"location":12,"defines":["USE_INSTANCING","CC_USE_REFLECTION_PROBE"]},{"name":"a_sh_linear_const_r","format":44,"isInstanced":true,"location":13,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_g","format":44,"isInstanced":true,"location":14,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_sh_linear_const_b","format":44,"isInstanced":true,"location":15,"defines":["USE_INSTANCING","CC_USE_LIGHT_PROBE"]},{"name":"a_vertexId","format":11,"location":16,"defines":["CC_USE_MORPH"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"descriptors":[{"rate":0,"blocks":[{"name":"CCLocal","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_matWorld","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matWorldIT","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_lightingMapUVParam","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_localShadowBias","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeData2","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData1","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_reflectionProbeBlendData2","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["!USE_INSTANCING"]},{"name":"CCMorph","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_displacementWeights","typename":"vec4","type":16,"count":15,"isArray":true},{"name":"cc_displacementTextureInfo","typename":"vec4","type":16,"count":1}],"defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointTextureInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_jointAnimInfo","typename":"vec4","type":16,"count":1,"precision":"highp "}],"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","stageFlags":1,"tags":{"builtin":"local"},"members":[{"name":"cc_joints","typename":"vec4","type":16,"count":0,"precision":"highp ","isArray":true}],"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","typename":"sampler2D","type":28,"count":1,"stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","typename":"sampler2D","type":28,"count":1,"precision":"highp ","stageFlags":1,"tags":{"builtin":"local"},"defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":1,"blocks":[],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":0,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":2,"blocks":[],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]},{"rate":3,"blocks":[{"name":"CCGlobal","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_time","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_screenSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nativeSize","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_probeInfo","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_debug_view_mode","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]},{"name":"CCCamera","stageFlags":17,"tags":{"builtin":"global"},"members":[{"name":"cc_matView","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProj","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_matViewProjInv","typename":"mat4","type":25,"count":1,"precision":"highp "},{"name":"cc_cameraPos","typename":"vec4","type":16,"count":1,"precision":"highp "},{"name":"cc_surfaceTransform","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_screenScale","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_exposure","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitDir","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_mainLitColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientSky","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_ambientGround","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogColor","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogBase","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_fogAdd","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_nearFar","typename":"vec4","type":16,"count":1,"precision":"mediump "},{"name":"cc_viewPort","typename":"vec4","type":16,"count":1,"precision":"mediump "}],"defines":[]}],"samplerTextures":[],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[]}],"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    in vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    in vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    in vec4 a_sh_linear_const_r;\n    in vec4 a_sh_linear_const_g;\n    in vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if !USE_INSTANCING\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n    highp vec4 cc_reflectionProbeData1;\n    highp vec4 cc_reflectionProbeData2;\n    highp vec4 cc_reflectionProbeBlendData1;\n    highp vec4 cc_reflectionProbeBlendData2;\n  };\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      layout(std140) uniform CCSkinning {\n        highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n      };\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nout vec2 v_uv;\nhighp vec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  highp vec4 pos = cc_matViewProj * matWorld * position;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n  mediump vec4 cc_probeInfo;\n  mediump vec4 cc_debug_view_mode;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_surfaceTransform;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 v_uv;\nuniform sampler2D mainTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture(mainTexture, v_uv);\n  if (o.a == 0.0)\n    discard;\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision mediump float;\nuniform highp mat4 cc_matViewProj;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n#define LIGHT_MAP_TYPE_DISABLED 0\n#define LIGHT_MAP_TYPE_ALL_IN_ONE 1\n#define LIGHT_MAP_TYPE_INDIRECT_OCCLUSION 2\n#define REFLECTION_PROBE_TYPE_NONE 0\n#define REFLECTION_PROBE_TYPE_CUBE 1\n#define REFLECTION_PROBE_TYPE_PLANAR 2\n#define REFLECTION_PROBE_TYPE_BLEND 3\n#define REFLECTION_PROBE_TYPE_BLEND_AND_SKYBOX 4\n#define LIGHT_TYPE_DIRECTIONAL 0.0\n#define LIGHT_TYPE_SPHERE 1.0\n#define LIGHT_TYPE_SPOT 2.0\n#define LIGHT_TYPE_POINT 3.0\n#define LIGHT_TYPE_RANGED_DIRECTIONAL 4.0\n#define IS_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_DIRECTIONAL)) < EPSILON_LOWP)\n#define IS_SPHERE_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPHERE)) < EPSILON_LOWP)\n#define IS_SPOT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_SPOT)) < EPSILON_LOWP)\n#define IS_POINT_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_POINT)) < EPSILON_LOWP)\n#define IS_RANGED_DIRECTIONAL_LIGHT(light_type) (abs(float(light_type) - float(LIGHT_TYPE_RANGED_DIRECTIONAL)) < EPSILON_LOWP)\n#define TONE_MAPPING_ACES 0\n#define TONE_MAPPING_LINEAR 1\n#define SURFACES_MAX_TRANSMIT_DEPTH_VALUE 999999.0\n#ifndef CC_SURFACES_DEBUG_VIEW_SINGLE\n  #define CC_SURFACES_DEBUG_VIEW_SINGLE 1\n#endif\n#ifndef CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC\n  #define CC_SURFACES_DEBUG_VIEW_COMPOSITE_AND_MISC 2\n#endif\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_USE_REFLECTION_PROBE || CC_RECEIVE_SHADOW\n    #if CC_RECEIVE_SHADOW\n    #endif\n    attribute vec4 a_localShadowBiasAndProbeId;\n  #endif\n  #if CC_USE_REFLECTION_PROBE\n    attribute vec4 a_reflectionProbeData;\n  #endif\n  #if CC_USE_LIGHT_PROBE\n    attribute vec4 a_sh_linear_const_r;\n    attribute vec4 a_sh_linear_const_g;\n    attribute vec4 a_sh_linear_const_b;\n  #endif\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if !USE_INSTANCING\n  uniform highp mat4 cc_matWorld;\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n  #endif\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n  vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n  vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n  }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n  vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n  }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      uniform highp sampler2D cc_realtimeJoint;\n    #else\n      uniform highp vec4 cc_joints[CC_JOINT_UNIFORM_CAPACITY * 3];\n    #endif\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    #if CC_USE_REAL_TIME_JOINT_TEXTURE\n      #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n        mat4 getJointMatrix (float i) {\n          float x = i;\n          vec4 v1 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 0.5 / 3.0));\n          vec4 v2 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 1.5 / 3.0));\n          vec4 v3 = texture2D(cc_realtimeJoint, vec2( x / 256.0, 2.5 / 3.0));\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #else\n        mat4 getJointMatrix (float i) {\n         float x = 4.0 * i;\n          vec4 v1 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 0.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 0.5 / 3.0)))\n          );\n          vec4 v2 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 1.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 1.5 / 3.0)))\n          );\n          vec4 v3 = vec4(\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 0.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 1.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 2.5)/ 1024.0, 2.5 / 3.0))),\n            decode32(texture2D(cc_realtimeJoint, vec2((x + 3.5)/ 1024.0, 2.5 / 3.0)))\n          );\n          return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n        }\n      #endif\n    #else\n      mat4 getJointMatrix (float i) {\n        int idx = int(i);\n        vec4 v1 = cc_joints[idx * 3];\n        vec4 v2 = cc_joints[idx * 3 + 1];\n        vec4 v3 = cc_joints[idx * 3 + 2];\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nvarying vec2 v_uv;\nhighp vec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  highp vec4 pos = cc_matViewProj * matWorld * position;\n  v_uv = a_texCoord;\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  o *= texture2D(mainTexture, v_uv);\n  if (o.a == 0.0)\n    discard;\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":["!USE_INSTANCING"]},{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","!CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_realtimeJoint","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION","CC_USE_REAL_TIME_JOINT_TEXTURE"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":74,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":42}},"defines":[{"name":"USE_INSTANCING","type":"boolean"},{"name":"CC_USE_SKINNING","type":"boolean"},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean"},{"name":"CC_USE_LIGHTMAP","type":"boolean"},{"name":"CC_USE_REFLECTION_PROBE","type":"boolean"},{"name":"CC_RECEIVE_SHADOW","type":"boolean"},{"name":"CC_USE_LIGHT_PROBE","type":"boolean"},{"name":"CC_USE_MORPH","type":"boolean"},{"name":"CC_MORPH_TARGET_COUNT","type":"number","range":[2,8]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean"},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean"},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean"},{"name":"CC_USE_REAL_TIME_JOINT_TEXTURE","type":"boolean"}]}],[{"name":"opaque","passes":[{"program":"../main/effect/textureTo3D|bonus-unlit-vs:vert|bonus-unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28}}}]}]]],0,0,[],[],[]],[[{"name":"shipin","rect":{"x":1242,"y":1646,"width":52,"height":37},"offset":{"x":0,"y":0},"originalSize":{"width":52,"height":37},"rotated":false,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"bg_border2","rect":{"x":1460,"y":558,"width":82,"height":83},"offset":{"x":0,"y":0},"originalSize":{"width":82,"height":83},"rotated":true,"capInsets":[34,33,32,37],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[40,"texiao1",".plist"],-1],0,0,[0],[5],[3]],[[{"name":"jiangbei","rect":{"x":1397,"y":472,"width":43,"height":38},"offset":{"x":0,"y":0},"originalSize":{"width":43,"height":38},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"bg_border","rect":{"x":1429,"y":958,"width":82,"height":83},"offset":{"x":0,"y":0},"originalSize":{"width":82,"height":83},"rotated":true,"capInsets":[30,31,28,35],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[20,"label-atlas",39.6,{"commonHeight":45,"fontSize":39,"atlasName":"shuzi","fontDefDictionary":{"48":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":0,"y":0,"width":46,"height":45}},"49":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":46,"y":0,"width":46,"height":45}},"50":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":92,"y":0,"width":46,"height":45}},"51":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":138,"y":0,"width":46,"height":45}},"52":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":184,"y":0,"width":46,"height":45}},"53":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":230,"y":0,"width":46,"height":45}},"54":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":276,"y":0,"width":46,"height":45}},"55":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":322,"y":0,"width":46,"height":45}},"56":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":368,"y":0,"width":46,"height":45}},"57":{"xOffset":0,"yOffset":0,"xAdvance":46,"rect":{"x":414,"y":0,"width":46,"height":45}}},"kerningDict":{}}]],0,0,[0],[5],[35]],[[{"name":"butter22223","rect":{"x":1254,"y":3,"width":157,"height":158},"offset":{"x":0,"y":0},"originalSize":{"width":157,"height":158},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[[20,"label-atlas",65.12,{"commonHeight":74,"fontSize":65,"atlasName":"shuzi","fontDefDictionary":{"48":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":0,"y":0,"width":65,"height":74}},"49":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":65,"y":0,"width":65,"height":74}},"50":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":130,"y":0,"width":65,"height":74}},"51":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":195,"y":0,"width":65,"height":74}},"52":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":260,"y":0,"width":65,"height":74}},"53":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":325,"y":0,"width":65,"height":74}},"54":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":390,"y":0,"width":65,"height":74}},"55":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":455,"y":0,"width":65,"height":74}},"56":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":520,"y":0,"width":65,"height":74}},"57":{"xOffset":0,"yOffset":0,"xAdvance":65,"rect":{"x":585,"y":0,"width":65,"height":74}}},"kerningDict":{}}]],0,0,[0],[5],[36]],[[{"name":"loading_btn_01","rect":{"x":1429,"y":3,"width":249,"height":108},"offset":{"x":0,"y":0},"originalSize":{"width":249,"height":108},"rotated":false,"capInsets":[106,50,115,50],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]],[[{"name":"tubiao","rect":{"x":729,"y":1257,"width":308,"height":201},"offset":{"x":0,"y":0},"originalSize":{"width":308,"height":201},"rotated":true,"capInsets":[0,0,0,0],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[1]],[[[73,"bgColor",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"startColor",8,[4,4291297158],"endColor",8,[4,4294935194]]],11]]],0,0,[0],[7],[7]],[[{"fmt":"0","w":0,"h":0},-1],[2],0,[],[],[]],[[{"base":"2,2,2,2,0,0","mipmaps":["fcNYEsBeFJvb8NknT/RF4h"]}],[3],0,[],[],[]],[[{"name":"bg","rect":{"x":0,"y":0,"width":4,"height":1800},"offset":{"x":0,"y":0},"originalSize":{"width":4,"height":1800},"rotated":false,"capInsets":[0,0,0,0],"vertices":{"rawPosition":[-2,-900,0,2,-900,0,-2,900,0,2,900,0],"indexes":[0,1,2,2,1,3],"uv":[0,1800,4,1800,0,0,4,0],"nuv":[0,0,1,0,0,1,1,1],"minPos":{"x":-2,"y":-900,"z":0},"maxPos":{"x":2,"y":900,"z":0}},"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[37]],[[{"name":"box_","rect":{"x":725,"y":1495,"width":20,"height":70},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":70},"rotated":true,"capInsets":[9,19,9,27],"packable":true,"pixelsToUnit":100,"pivot":{"x":0.5,"y":0.5},"meshType":0}],[0],0,[0],[1],[0]]]]
